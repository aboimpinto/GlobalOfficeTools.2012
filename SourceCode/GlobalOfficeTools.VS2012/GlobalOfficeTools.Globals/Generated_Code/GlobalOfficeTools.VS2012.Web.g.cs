//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GlobalOfficeTools.VS2012.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'CLItblAcl' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class CLItblAcl : Entity
    {
        
        private int _aclId;
        
        private int _companyId;
        
        private string _entity;
        
        private Nullable<int> _entityId;
        
        private string _resource;
        
        private int _resourceId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAclIdChanging(int value);
        partial void OnAclIdChanged();
        partial void OnCompanyIdChanging(int value);
        partial void OnCompanyIdChanged();
        partial void OnEntityChanging(string value);
        partial void OnEntityChanged();
        partial void OnEntityIdChanging(Nullable<int> value);
        partial void OnEntityIdChanged();
        partial void OnResourceChanging(string value);
        partial void OnResourceChanged();
        partial void OnResourceIdChanging(int value);
        partial void OnResourceIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CLItblAcl"/> class.
        /// </summary>
        public CLItblAcl()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AclId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int AclId
        {
            get
            {
                return this._aclId;
            }
            set
            {
                if ((this._aclId != value))
                {
                    this.OnAclIdChanging(value);
                    this.ValidateProperty("AclId", value);
                    this._aclId = value;
                    this.RaisePropertyChanged("AclId");
                    this.OnAclIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyId' value.
        /// </summary>
        [DataMember()]
        public int CompanyId
        {
            get
            {
                return this._companyId;
            }
            set
            {
                if ((this._companyId != value))
                {
                    this.OnCompanyIdChanging(value);
                    this.RaiseDataMemberChanging("CompanyId");
                    this.ValidateProperty("CompanyId", value);
                    this._companyId = value;
                    this.RaiseDataMemberChanged("CompanyId");
                    this.OnCompanyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Entity' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Entity
        {
            get
            {
                return this._entity;
            }
            set
            {
                if ((this._entity != value))
                {
                    this.OnEntityChanging(value);
                    this.RaiseDataMemberChanging("Entity");
                    this.ValidateProperty("Entity", value);
                    this._entity = value;
                    this.RaiseDataMemberChanged("Entity");
                    this.OnEntityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EntityId' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> EntityId
        {
            get
            {
                return this._entityId;
            }
            set
            {
                if ((this._entityId != value))
                {
                    this.OnEntityIdChanging(value);
                    this.RaiseDataMemberChanging("EntityId");
                    this.ValidateProperty("EntityId", value);
                    this._entityId = value;
                    this.RaiseDataMemberChanged("EntityId");
                    this.OnEntityIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Resource' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Resource
        {
            get
            {
                return this._resource;
            }
            set
            {
                if ((this._resource != value))
                {
                    this.OnResourceChanging(value);
                    this.RaiseDataMemberChanging("Resource");
                    this.ValidateProperty("Resource", value);
                    this._resource = value;
                    this.RaiseDataMemberChanged("Resource");
                    this.OnResourceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceId' value.
        /// </summary>
        [DataMember()]
        public int ResourceId
        {
            get
            {
                return this._resourceId;
            }
            set
            {
                if ((this._resourceId != value))
                {
                    this.OnResourceIdChanging(value);
                    this.RaiseDataMemberChanging("ResourceId");
                    this.ValidateProperty("ResourceId", value);
                    this._resourceId = value;
                    this.RaiseDataMemberChanged("ResourceId");
                    this.OnResourceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._aclId;
        }
    }
    
    /// <summary>
    /// The 'CLItblCompany' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class CLItblCompany : Entity
    {
        
        private EntityCollection<CLItblCompanyUser> _clItblCompanyUsers;
        
        private int _companyId;
        
        private string _fullName;
        
        private string _shortName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIdChanging(int value);
        partial void OnCompanyIdChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CLItblCompany"/> class.
        /// </summary>
        public CLItblCompany()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CLItblCompanyUser"/> entity instances.
        /// </summary>
        [Association("CLItblCompany_CLItblCompanyUser", "CompanyId", "CompanyId")]
        [XmlIgnore()]
        public EntityCollection<CLItblCompanyUser> CLItblCompanyUsers
        {
            get
            {
                if ((this._clItblCompanyUsers == null))
                {
                    this._clItblCompanyUsers = new EntityCollection<CLItblCompanyUser>(this, "CLItblCompanyUsers", this.FilterCLItblCompanyUsers, this.AttachCLItblCompanyUsers, this.DetachCLItblCompanyUsers);
                }
                return this._clItblCompanyUsers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CompanyId
        {
            get
            {
                return this._companyId;
            }
            set
            {
                if ((this._companyId != value))
                {
                    this.OnCompanyIdChanging(value);
                    this.ValidateProperty("CompanyId", value);
                    this._companyId = value;
                    this.RaisePropertyChanged("CompanyId");
                    this.OnCompanyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShortName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ShortName
        {
            get
            {
                return this._shortName;
            }
            set
            {
                if ((this._shortName != value))
                {
                    this.OnShortNameChanging(value);
                    this.RaiseDataMemberChanging("ShortName");
                    this.ValidateProperty("ShortName", value);
                    this._shortName = value;
                    this.RaiseDataMemberChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }
        
        private void AttachCLItblCompanyUsers(CLItblCompanyUser entity)
        {
            entity.CLItblCompany = this;
        }
        
        private void DetachCLItblCompanyUsers(CLItblCompanyUser entity)
        {
            entity.CLItblCompany = null;
        }
        
        private bool FilterCLItblCompanyUsers(CLItblCompanyUser entity)
        {
            return (entity.CompanyId == this.CompanyId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyId;
        }
    }
    
    /// <summary>
    /// The 'CLItblCompanyUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class CLItblCompanyUser : Entity
    {
        
        private EntityRef<CLItblCompany> _clItblCompany;
        
        private EntityRef<CLItblUser> _clItblUser;
        
        private int _companyId;
        
        private int _companyUserId;
        
        private int _employeeTypeId;
        
        private int _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIdChanging(int value);
        partial void OnCompanyIdChanged();
        partial void OnCompanyUserIdChanging(int value);
        partial void OnCompanyUserIdChanged();
        partial void OnEmployeeTypeIdChanging(int value);
        partial void OnEmployeeTypeIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CLItblCompanyUser"/> class.
        /// </summary>
        public CLItblCompanyUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CLItblCompany"/> entity.
        /// </summary>
        [Association("CLItblCompany_CLItblCompanyUser", "CompanyId", "CompanyId", IsForeignKey=true)]
        [XmlIgnore()]
        public CLItblCompany CLItblCompany
        {
            get
            {
                if ((this._clItblCompany == null))
                {
                    this._clItblCompany = new EntityRef<CLItblCompany>(this, "CLItblCompany", this.FilterCLItblCompany);
                }
                return this._clItblCompany.Entity;
            }
            set
            {
                CLItblCompany previous = this.CLItblCompany;
                if ((previous != value))
                {
                    this.ValidateProperty("CLItblCompany", value);
                    if ((previous != null))
                    {
                        this._clItblCompany.Entity = null;
                        previous.CLItblCompanyUsers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyId = value.CompanyId;
                    }
                    else
                    {
                        this.CompanyId = default(int);
                    }
                    this._clItblCompany.Entity = value;
                    if ((value != null))
                    {
                        value.CLItblCompanyUsers.Add(this);
                    }
                    this.RaisePropertyChanged("CLItblCompany");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CLItblUser"/> entity.
        /// </summary>
        [Association("CLItblUser_CLItblCompanyUser", "UserId", "UserId", IsForeignKey=true)]
        [XmlIgnore()]
        public CLItblUser CLItblUser
        {
            get
            {
                if ((this._clItblUser == null))
                {
                    this._clItblUser = new EntityRef<CLItblUser>(this, "CLItblUser", this.FilterCLItblUser);
                }
                return this._clItblUser.Entity;
            }
            set
            {
                CLItblUser previous = this.CLItblUser;
                if ((previous != value))
                {
                    this.ValidateProperty("CLItblUser", value);
                    if ((previous != null))
                    {
                        this._clItblUser.Entity = null;
                        previous.CLItblCompanyUsers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserId = value.UserId;
                    }
                    else
                    {
                        this.UserId = default(int);
                    }
                    this._clItblUser.Entity = value;
                    if ((value != null))
                    {
                        value.CLItblCompanyUsers.Add(this);
                    }
                    this.RaisePropertyChanged("CLItblUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CompanyId
        {
            get
            {
                return this._companyId;
            }
            set
            {
                if ((this._companyId != value))
                {
                    this.OnCompanyIdChanging(value);
                    this.RaiseDataMemberChanging("CompanyId");
                    this.ValidateProperty("CompanyId", value);
                    this._companyId = value;
                    this.RaiseDataMemberChanged("CompanyId");
                    this.OnCompanyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyUserId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CompanyUserId
        {
            get
            {
                return this._companyUserId;
            }
            set
            {
                if ((this._companyUserId != value))
                {
                    this.OnCompanyUserIdChanging(value);
                    this.ValidateProperty("CompanyUserId", value);
                    this._companyUserId = value;
                    this.RaisePropertyChanged("CompanyUserId");
                    this.OnCompanyUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeTypeId' value.
        /// </summary>
        [DataMember()]
        public int EmployeeTypeId
        {
            get
            {
                return this._employeeTypeId;
            }
            set
            {
                if ((this._employeeTypeId != value))
                {
                    this.OnEmployeeTypeIdChanging(value);
                    this.RaiseDataMemberChanging("EmployeeTypeId");
                    this.ValidateProperty("EmployeeTypeId", value);
                    this._employeeTypeId = value;
                    this.RaiseDataMemberChanged("EmployeeTypeId");
                    this.OnEmployeeTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        private bool FilterCLItblCompany(CLItblCompany entity)
        {
            return (entity.CompanyId == this.CompanyId);
        }
        
        private bool FilterCLItblUser(CLItblUser entity)
        {
            return (entity.UserId == this.UserId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyUserId;
        }
    }
    
    /// <summary>
    /// The 'CLItblFederationDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class CLItblFederationDetail : Entity
    {
        
        private EntityRef<CLItblUser> _clItblUser;
        
        private int _federationDetailId;
        
        private string _federationId;
        
        private string _federationType;
        
        private string _password;
        
        private int _userId;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFederationDetailIdChanging(int value);
        partial void OnFederationDetailIdChanged();
        partial void OnFederationIdChanging(string value);
        partial void OnFederationIdChanged();
        partial void OnFederationTypeChanging(string value);
        partial void OnFederationTypeChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CLItblFederationDetail"/> class.
        /// </summary>
        public CLItblFederationDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CLItblUser"/> entity.
        /// </summary>
        [Association("CLItblUser_CLItblFederationDetail", "UserId", "UserId", IsForeignKey=true)]
        [XmlIgnore()]
        public CLItblUser CLItblUser
        {
            get
            {
                if ((this._clItblUser == null))
                {
                    this._clItblUser = new EntityRef<CLItblUser>(this, "CLItblUser", this.FilterCLItblUser);
                }
                return this._clItblUser.Entity;
            }
            set
            {
                CLItblUser previous = this.CLItblUser;
                if ((previous != value))
                {
                    this.ValidateProperty("CLItblUser", value);
                    if ((previous != null))
                    {
                        this._clItblUser.Entity = null;
                        previous.CLItblFederationDetails.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserId = value.UserId;
                    }
                    else
                    {
                        this.UserId = default(int);
                    }
                    this._clItblUser.Entity = value;
                    if ((value != null))
                    {
                        value.CLItblFederationDetails.Add(this);
                    }
                    this.RaisePropertyChanged("CLItblUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FederationDetailId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int FederationDetailId
        {
            get
            {
                return this._federationDetailId;
            }
            set
            {
                if ((this._federationDetailId != value))
                {
                    this.OnFederationDetailIdChanging(value);
                    this.ValidateProperty("FederationDetailId", value);
                    this._federationDetailId = value;
                    this.RaisePropertyChanged("FederationDetailId");
                    this.OnFederationDetailIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FederationId' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string FederationId
        {
            get
            {
                return this._federationId;
            }
            set
            {
                if ((this._federationId != value))
                {
                    this.OnFederationIdChanging(value);
                    this.RaiseDataMemberChanging("FederationId");
                    this.ValidateProperty("FederationId", value);
                    this._federationId = value;
                    this.RaiseDataMemberChanged("FederationId");
                    this.OnFederationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FederationType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string FederationType
        {
            get
            {
                return this._federationType;
            }
            set
            {
                if ((this._federationType != value))
                {
                    this.OnFederationTypeChanging(value);
                    this.RaiseDataMemberChanging("FederationType");
                    this.ValidateProperty("FederationType", value);
                    this._federationType = value;
                    this.RaiseDataMemberChanged("FederationType");
                    this.OnFederationTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        private bool FilterCLItblUser(CLItblUser entity)
        {
            return (entity.UserId == this.UserId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._federationDetailId;
        }
    }
    
    /// <summary>
    /// The 'CLItblReference' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class CLItblReference : Entity
    {
        
        private string _code;
        
        private int _companyId;
        
        private int _id;
        
        private bool _isActive;
        
        private bool _isSystem;
        
        private int _referenceId;
        
        private string _referenceTable;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnCompanyIdChanging(int value);
        partial void OnCompanyIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnIsSystemChanging(bool value);
        partial void OnIsSystemChanged();
        partial void OnReferenceIdChanging(int value);
        partial void OnReferenceIdChanged();
        partial void OnReferenceTableChanging(string value);
        partial void OnReferenceTableChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CLItblReference"/> class.
        /// </summary>
        public CLItblReference()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyId' value.
        /// </summary>
        [DataMember()]
        public int CompanyId
        {
            get
            {
                return this._companyId;
            }
            set
            {
                if ((this._companyId != value))
                {
                    this.OnCompanyIdChanging(value);
                    this.RaiseDataMemberChanging("CompanyId");
                    this.ValidateProperty("CompanyId", value);
                    this._companyId = value;
                    this.RaiseDataMemberChanged("CompanyId");
                    this.OnCompanyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSystem' value.
        /// </summary>
        [DataMember()]
        public bool IsSystem
        {
            get
            {
                return this._isSystem;
            }
            set
            {
                if ((this._isSystem != value))
                {
                    this.OnIsSystemChanging(value);
                    this.RaiseDataMemberChanging("IsSystem");
                    this.ValidateProperty("IsSystem", value);
                    this._isSystem = value;
                    this.RaiseDataMemberChanged("IsSystem");
                    this.OnIsSystemChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReferenceId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ReferenceId
        {
            get
            {
                return this._referenceId;
            }
            set
            {
                if ((this._referenceId != value))
                {
                    this.OnReferenceIdChanging(value);
                    this.ValidateProperty("ReferenceId", value);
                    this._referenceId = value;
                    this.RaisePropertyChanged("ReferenceId");
                    this.OnReferenceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReferenceTable' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string ReferenceTable
        {
            get
            {
                return this._referenceTable;
            }
            set
            {
                if ((this._referenceTable != value))
                {
                    this.OnReferenceTableChanging(value);
                    this.RaiseDataMemberChanging("ReferenceTable");
                    this.ValidateProperty("ReferenceTable", value);
                    this._referenceTable = value;
                    this.RaiseDataMemberChanged("ReferenceTable");
                    this.OnReferenceTableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._referenceId;
        }
    }
    
    /// <summary>
    /// The 'CLItblUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class CLItblUser : Entity
    {
        
        private EntityCollection<CLItblCompanyUser> _clItblCompanyUsers;
        
        private EntityCollection<CLItblFederationDetail> _clItblFederationDetails;
        
        private string _fullName;
        
        private bool _isActive;
        
        private int _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CLItblUser"/> class.
        /// </summary>
        public CLItblUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CLItblCompanyUser"/> entity instances.
        /// </summary>
        [Association("CLItblUser_CLItblCompanyUser", "UserId", "UserId")]
        [XmlIgnore()]
        public EntityCollection<CLItblCompanyUser> CLItblCompanyUsers
        {
            get
            {
                if ((this._clItblCompanyUsers == null))
                {
                    this._clItblCompanyUsers = new EntityCollection<CLItblCompanyUser>(this, "CLItblCompanyUsers", this.FilterCLItblCompanyUsers, this.AttachCLItblCompanyUsers, this.DetachCLItblCompanyUsers);
                }
                return this._clItblCompanyUsers;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CLItblFederationDetail"/> entity instances.
        /// </summary>
        [Association("CLItblUser_CLItblFederationDetail", "UserId", "UserId")]
        [XmlIgnore()]
        public EntityCollection<CLItblFederationDetail> CLItblFederationDetails
        {
            get
            {
                if ((this._clItblFederationDetails == null))
                {
                    this._clItblFederationDetails = new EntityCollection<CLItblFederationDetail>(this, "CLItblFederationDetails", this.FilterCLItblFederationDetails, this.AttachCLItblFederationDetails, this.DetachCLItblFederationDetails);
                }
                return this._clItblFederationDetails;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaisePropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        private void AttachCLItblCompanyUsers(CLItblCompanyUser entity)
        {
            entity.CLItblUser = this;
        }
        
        private void DetachCLItblCompanyUsers(CLItblCompanyUser entity)
        {
            entity.CLItblUser = null;
        }
        
        private bool FilterCLItblCompanyUsers(CLItblCompanyUser entity)
        {
            return (entity.UserId == this.UserId);
        }
        
        private void AttachCLItblFederationDetails(CLItblFederationDetail entity)
        {
            entity.CLItblUser = this;
        }
        
        private void DetachCLItblFederationDetails(CLItblFederationDetail entity)
        {
            entity.CLItblUser = null;
        }
        
        private bool FilterCLItblFederationDetails(CLItblFederationDetail entity)
        {
            return (entity.UserId == this.UserId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._userId;
        }
    }
    
    /// <summary>
    /// The 'ENTtblAddress' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class ENTtblAddress : Entity
    {
        
        private int _addressId;
        
        private string _addressLineOne;
        
        private string _addressLineTwo;
        
        private string _country;
        
        private bool _isBillingAddress;
        
        private bool _isShippingAddress;
        
        private string _postalCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressIdChanging(int value);
        partial void OnAddressIdChanged();
        partial void OnAddressLineOneChanging(string value);
        partial void OnAddressLineOneChanged();
        partial void OnAddressLineTwoChanging(string value);
        partial void OnAddressLineTwoChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnIsBillingAddressChanging(bool value);
        partial void OnIsBillingAddressChanged();
        partial void OnIsShippingAddressChanging(bool value);
        partial void OnIsShippingAddressChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ENTtblAddress"/> class.
        /// </summary>
        public ENTtblAddress()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AddressId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int AddressId
        {
            get
            {
                return this._addressId;
            }
            set
            {
                if ((this._addressId != value))
                {
                    this.OnAddressIdChanging(value);
                    this.ValidateProperty("AddressId", value);
                    this._addressId = value;
                    this.RaisePropertyChanged("AddressId");
                    this.OnAddressIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLineOne' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string AddressLineOne
        {
            get
            {
                return this._addressLineOne;
            }
            set
            {
                if ((this._addressLineOne != value))
                {
                    this.OnAddressLineOneChanging(value);
                    this.RaiseDataMemberChanging("AddressLineOne");
                    this.ValidateProperty("AddressLineOne", value);
                    this._addressLineOne = value;
                    this.RaiseDataMemberChanged("AddressLineOne");
                    this.OnAddressLineOneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLineTwo' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string AddressLineTwo
        {
            get
            {
                return this._addressLineTwo;
            }
            set
            {
                if ((this._addressLineTwo != value))
                {
                    this.OnAddressLineTwoChanging(value);
                    this.RaiseDataMemberChanging("AddressLineTwo");
                    this.ValidateProperty("AddressLineTwo", value);
                    this._addressLineTwo = value;
                    this.RaiseDataMemberChanged("AddressLineTwo");
                    this.OnAddressLineTwoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsBillingAddress' value.
        /// </summary>
        [DataMember()]
        public bool IsBillingAddress
        {
            get
            {
                return this._isBillingAddress;
            }
            set
            {
                if ((this._isBillingAddress != value))
                {
                    this.OnIsBillingAddressChanging(value);
                    this.RaiseDataMemberChanging("IsBillingAddress");
                    this.ValidateProperty("IsBillingAddress", value);
                    this._isBillingAddress = value;
                    this.RaiseDataMemberChanged("IsBillingAddress");
                    this.OnIsBillingAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsShippingAddress' value.
        /// </summary>
        [DataMember()]
        public bool IsShippingAddress
        {
            get
            {
                return this._isShippingAddress;
            }
            set
            {
                if ((this._isShippingAddress != value))
                {
                    this.OnIsShippingAddressChanging(value);
                    this.RaiseDataMemberChanging("IsShippingAddress");
                    this.ValidateProperty("IsShippingAddress", value);
                    this._isShippingAddress = value;
                    this.RaiseDataMemberChanged("IsShippingAddress");
                    this.OnIsShippingAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PostalCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string PostalCode
        {
            get
            {
                return this._postalCode;
            }
            set
            {
                if ((this._postalCode != value))
                {
                    this.OnPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("PostalCode");
                    this.ValidateProperty("PostalCode", value);
                    this._postalCode = value;
                    this.RaiseDataMemberChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._addressId;
        }
    }
    
    /// <summary>
    /// The 'ENTtblAddressBook' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class ENTtblAddressBook : Entity
    {
        
        private int _entityAddressBookId;
        
        private int _entityId;
        
        private EntityRef<ENTtblEntity> _enTtblEntity;
        
        private int _hierarchyId;
        
        private bool _isDefault;
        
        private string _reference;
        
        private int _referenceId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEntityAddressBookIdChanging(int value);
        partial void OnEntityAddressBookIdChanged();
        partial void OnEntityIdChanging(int value);
        partial void OnEntityIdChanged();
        partial void OnHierarchyIdChanging(int value);
        partial void OnHierarchyIdChanged();
        partial void OnIsDefaultChanging(bool value);
        partial void OnIsDefaultChanged();
        partial void OnReferenceChanging(string value);
        partial void OnReferenceChanged();
        partial void OnReferenceIdChanging(int value);
        partial void OnReferenceIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ENTtblAddressBook"/> class.
        /// </summary>
        public ENTtblAddressBook()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EntityAddressBookId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EntityAddressBookId
        {
            get
            {
                return this._entityAddressBookId;
            }
            set
            {
                if ((this._entityAddressBookId != value))
                {
                    this.OnEntityAddressBookIdChanging(value);
                    this.ValidateProperty("EntityAddressBookId", value);
                    this._entityAddressBookId = value;
                    this.RaisePropertyChanged("EntityAddressBookId");
                    this.OnEntityAddressBookIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EntityId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int EntityId
        {
            get
            {
                return this._entityId;
            }
            set
            {
                if ((this._entityId != value))
                {
                    this.OnEntityIdChanging(value);
                    this.RaiseDataMemberChanging("EntityId");
                    this.ValidateProperty("EntityId", value);
                    this._entityId = value;
                    this.RaiseDataMemberChanged("EntityId");
                    this.OnEntityIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ENTtblEntity"/> entity.
        /// </summary>
        [Association("ENTtblEntity_ENTtblAddressBook", "EntityId", "EntityId", IsForeignKey=true)]
        [XmlIgnore()]
        public ENTtblEntity ENTtblEntity
        {
            get
            {
                if ((this._enTtblEntity == null))
                {
                    this._enTtblEntity = new EntityRef<ENTtblEntity>(this, "ENTtblEntity", this.FilterENTtblEntity);
                }
                return this._enTtblEntity.Entity;
            }
            set
            {
                ENTtblEntity previous = this.ENTtblEntity;
                if ((previous != value))
                {
                    this.ValidateProperty("ENTtblEntity", value);
                    if ((previous != null))
                    {
                        this._enTtblEntity.Entity = null;
                        previous.ENTtblAddressBooks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EntityId = value.EntityId;
                    }
                    else
                    {
                        this.EntityId = default(int);
                    }
                    this._enTtblEntity.Entity = value;
                    if ((value != null))
                    {
                        value.ENTtblAddressBooks.Add(this);
                    }
                    this.RaisePropertyChanged("ENTtblEntity");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HierarchyId' value.
        /// </summary>
        [DataMember()]
        public int HierarchyId
        {
            get
            {
                return this._hierarchyId;
            }
            set
            {
                if ((this._hierarchyId != value))
                {
                    this.OnHierarchyIdChanging(value);
                    this.RaiseDataMemberChanging("HierarchyId");
                    this.ValidateProperty("HierarchyId", value);
                    this._hierarchyId = value;
                    this.RaiseDataMemberChanged("HierarchyId");
                    this.OnHierarchyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsDefault' value.
        /// </summary>
        [DataMember()]
        public bool IsDefault
        {
            get
            {
                return this._isDefault;
            }
            set
            {
                if ((this._isDefault != value))
                {
                    this.OnIsDefaultChanging(value);
                    this.RaiseDataMemberChanging("IsDefault");
                    this.ValidateProperty("IsDefault", value);
                    this._isDefault = value;
                    this.RaiseDataMemberChanged("IsDefault");
                    this.OnIsDefaultChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Reference' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Reference
        {
            get
            {
                return this._reference;
            }
            set
            {
                if ((this._reference != value))
                {
                    this.OnReferenceChanging(value);
                    this.RaiseDataMemberChanging("Reference");
                    this.ValidateProperty("Reference", value);
                    this._reference = value;
                    this.RaiseDataMemberChanged("Reference");
                    this.OnReferenceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReferenceId' value.
        /// </summary>
        [DataMember()]
        public int ReferenceId
        {
            get
            {
                return this._referenceId;
            }
            set
            {
                if ((this._referenceId != value))
                {
                    this.OnReferenceIdChanging(value);
                    this.RaiseDataMemberChanging("ReferenceId");
                    this.ValidateProperty("ReferenceId", value);
                    this._referenceId = value;
                    this.RaiseDataMemberChanged("ReferenceId");
                    this.OnReferenceIdChanged();
                }
            }
        }
        
        private bool FilterENTtblEntity(ENTtblEntity entity)
        {
            return (entity.EntityId == this.EntityId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._entityAddressBookId;
        }
    }
    
    /// <summary>
    /// The 'ENTtblContact' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class ENTtblContact : Entity
    {
        
        private int _contactId;
        
        private string _type;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnContactIdChanging(int value);
        partial void OnContactIdChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ENTtblContact"/> class.
        /// </summary>
        public ENTtblContact()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ContactId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ContactId
        {
            get
            {
                return this._contactId;
            }
            set
            {
                if ((this._contactId != value))
                {
                    this.OnContactIdChanging(value);
                    this.ValidateProperty("ContactId", value);
                    this._contactId = value;
                    this.RaisePropertyChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._contactId;
        }
    }
    
    /// <summary>
    /// The 'ENTtblEntity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class ENTtblEntity : Entity
    {
        
        private int _entityId;
        
        private EntityCollection<ENTtblAddressBook> _enTtblAddressBooks;
        
        private string _name;
        
        private string _shortName;
        
        private string _vatNumber;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEntityIdChanging(int value);
        partial void OnEntityIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();
        partial void OnVatNumberChanging(string value);
        partial void OnVatNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ENTtblEntity"/> class.
        /// </summary>
        public ENTtblEntity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EntityId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EntityId
        {
            get
            {
                return this._entityId;
            }
            set
            {
                if ((this._entityId != value))
                {
                    this.OnEntityIdChanging(value);
                    this.ValidateProperty("EntityId", value);
                    this._entityId = value;
                    this.RaisePropertyChanged("EntityId");
                    this.OnEntityIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ENTtblAddressBook"/> entity instances.
        /// </summary>
        [Association("ENTtblEntity_ENTtblAddressBook", "EntityId", "EntityId")]
        [XmlIgnore()]
        public EntityCollection<ENTtblAddressBook> ENTtblAddressBooks
        {
            get
            {
                if ((this._enTtblAddressBooks == null))
                {
                    this._enTtblAddressBooks = new EntityCollection<ENTtblAddressBook>(this, "ENTtblAddressBooks", this.FilterENTtblAddressBooks, this.AttachENTtblAddressBooks, this.DetachENTtblAddressBooks);
                }
                return this._enTtblAddressBooks;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShortName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ShortName
        {
            get
            {
                return this._shortName;
            }
            set
            {
                if ((this._shortName != value))
                {
                    this.OnShortNameChanging(value);
                    this.RaiseDataMemberChanging("ShortName");
                    this.ValidateProperty("ShortName", value);
                    this._shortName = value;
                    this.RaiseDataMemberChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VatNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string VatNumber
        {
            get
            {
                return this._vatNumber;
            }
            set
            {
                if ((this._vatNumber != value))
                {
                    this.OnVatNumberChanging(value);
                    this.RaiseDataMemberChanging("VatNumber");
                    this.ValidateProperty("VatNumber", value);
                    this._vatNumber = value;
                    this.RaiseDataMemberChanged("VatNumber");
                    this.OnVatNumberChanged();
                }
            }
        }
        
        private void AttachENTtblAddressBooks(ENTtblAddressBook entity)
        {
            entity.ENTtblEntity = this;
        }
        
        private void DetachENTtblAddressBooks(ENTtblAddressBook entity)
        {
            entity.ENTtblEntity = null;
        }
        
        private bool FilterENTtblAddressBooks(ENTtblAddressBook entity)
        {
            return (entity.EntityId == this.EntityId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._entityId;
        }
    }
    
    /// <summary>
    /// The 'ENTtblPerson' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class ENTtblPerson : Entity
    {
        
        private string _name;
        
        private string _note;
        
        private int _personId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ENTtblPerson"/> class.
        /// </summary>
        public ENTtblPerson()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaisePropertyChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._personId;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'GlobalOfficeToolsDomainService' DomainService.
    /// </summary>
    public sealed partial class GlobalOfficeToolsDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalOfficeToolsDomainContext"/> class.
        /// </summary>
        public GlobalOfficeToolsDomainContext() : 
                this(new WebDomainClient<IGlobalOfficeToolsDomainServiceContract>(new Uri("GlobalOfficeTools-VS2012-Web-GlobalOfficeToolsDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalOfficeToolsDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The GlobalOfficeToolsDomainService service URI.</param>
        public GlobalOfficeToolsDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IGlobalOfficeToolsDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalOfficeToolsDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public GlobalOfficeToolsDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="CLItblUser"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<CLItblUser> CLItblUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CLItblUser>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CLItblAcl"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<CLItblAcl> CLItblAcls
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CLItblAcl>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CLItblCompany"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<CLItblCompany> CLItblCompanies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CLItblCompany>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CLItblCompanyUser"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<CLItblCompanyUser> CLItblCompanyUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CLItblCompanyUser>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CLItblFederationDetail"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<CLItblFederationDetail> CLItblFederationDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CLItblFederationDetail>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CLItblReference"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<CLItblReference> CLItblReferences
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CLItblReference>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ENTtblAddressBook"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<ENTtblAddressBook> ENTtblAddressBooks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ENTtblAddressBook>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ENTtblAddress"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<ENTtblAddress> ENTtblAddresses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ENTtblAddress>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ENTtblContact"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<ENTtblContact> ENTtblContacts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ENTtblContact>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ENTtblEntity"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<ENTtblEntity> ENTtblEntities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ENTtblEntity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ENTtblPerson"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<ENTtblPerson> ENTtblPersons
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ENTtblPerson>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SYStblOption"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<SYStblOption> SYStblOptions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SYStblOption>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SYStblMenu"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<SYStblMenu> SYStblMenus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SYStblMenu>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SYStblNewsMessage"/> entity instances that have been loaded into this <see cref="GlobalOfficeToolsDomainContext"/> instance.
        /// </summary>
        public EntitySet<SYStblNewsMessage> SYStblNewsMessages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SYStblNewsMessage>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CLItblUser"/> entity instances using the 'GetAuthenticatedUser' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CLItblUser"/> entity instances.</returns>
        public EntityQuery<CLItblUser> GetAuthenticatedUserQuery(string userName, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            this.ValidateMethod("GetAuthenticatedUserQuery", parameters);
            return base.CreateQuery<CLItblUser>("GetAuthenticatedUser", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CLItblAcl"/> entity instances using the 'GetCLItblAcls' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CLItblAcl"/> entity instances.</returns>
        public EntityQuery<CLItblAcl> GetCLItblAclsQuery()
        {
            this.ValidateMethod("GetCLItblAclsQuery", null);
            return base.CreateQuery<CLItblAcl>("GetCLItblAcls", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CLItblCompany"/> entity instances using the 'GetCLItblCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CLItblCompany"/> entity instances.</returns>
        public EntityQuery<CLItblCompany> GetCLItblCompaniesQuery()
        {
            this.ValidateMethod("GetCLItblCompaniesQuery", null);
            return base.CreateQuery<CLItblCompany>("GetCLItblCompanies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CLItblCompanyUser"/> entity instances using the 'GetCLItblCompanyUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CLItblCompanyUser"/> entity instances.</returns>
        public EntityQuery<CLItblCompanyUser> GetCLItblCompanyUsersQuery()
        {
            this.ValidateMethod("GetCLItblCompanyUsersQuery", null);
            return base.CreateQuery<CLItblCompanyUser>("GetCLItblCompanyUsers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CLItblFederationDetail"/> entity instances using the 'GetCLItblFederationDetails' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CLItblFederationDetail"/> entity instances.</returns>
        public EntityQuery<CLItblFederationDetail> GetCLItblFederationDetailsQuery()
        {
            this.ValidateMethod("GetCLItblFederationDetailsQuery", null);
            return base.CreateQuery<CLItblFederationDetail>("GetCLItblFederationDetails", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CLItblReference"/> entity instances using the 'GetCLItblReferences' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CLItblReference"/> entity instances.</returns>
        public EntityQuery<CLItblReference> GetCLItblReferencesQuery()
        {
            this.ValidateMethod("GetCLItblReferencesQuery", null);
            return base.CreateQuery<CLItblReference>("GetCLItblReferences", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CLItblUser"/> entity instances using the 'GetCLItblUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CLItblUser"/> entity instances.</returns>
        public EntityQuery<CLItblUser> GetCLItblUsersQuery()
        {
            this.ValidateMethod("GetCLItblUsersQuery", null);
            return base.CreateQuery<CLItblUser>("GetCLItblUsers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ENTtblAddressBook"/> entity instances using the 'GetENTtblAddressBooks' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ENTtblAddressBook"/> entity instances.</returns>
        public EntityQuery<ENTtblAddressBook> GetENTtblAddressBooksQuery()
        {
            this.ValidateMethod("GetENTtblAddressBooksQuery", null);
            return base.CreateQuery<ENTtblAddressBook>("GetENTtblAddressBooks", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ENTtblAddress"/> entity instances using the 'GetENTtblAddresses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ENTtblAddress"/> entity instances.</returns>
        public EntityQuery<ENTtblAddress> GetENTtblAddressesQuery()
        {
            this.ValidateMethod("GetENTtblAddressesQuery", null);
            return base.CreateQuery<ENTtblAddress>("GetENTtblAddresses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ENTtblContact"/> entity instances using the 'GetENTtblContacts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ENTtblContact"/> entity instances.</returns>
        public EntityQuery<ENTtblContact> GetENTtblContactsQuery()
        {
            this.ValidateMethod("GetENTtblContactsQuery", null);
            return base.CreateQuery<ENTtblContact>("GetENTtblContacts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ENTtblEntity"/> entity instances using the 'GetENTtblEntities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ENTtblEntity"/> entity instances.</returns>
        public EntityQuery<ENTtblEntity> GetENTtblEntitiesQuery()
        {
            this.ValidateMethod("GetENTtblEntitiesQuery", null);
            return base.CreateQuery<ENTtblEntity>("GetENTtblEntities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ENTtblPerson"/> entity instances using the 'GetENTtblPersons' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ENTtblPerson"/> entity instances.</returns>
        public EntityQuery<ENTtblPerson> GetENTtblPersonsQuery()
        {
            this.ValidateMethod("GetENTtblPersonsQuery", null);
            return base.CreateQuery<ENTtblPerson>("GetENTtblPersons", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SYStblOption"/> entity instances using the 'GetOptions' query.
        /// </summary>
        /// <param name="optionsType">The value for the 'optionsType' parameter of the query.</param>
        /// <param name="objectId">The value for the 'objectId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SYStblOption"/> entity instances.</returns>
        public EntityQuery<SYStblOption> GetOptionsQuery(string optionsType, int objectId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("optionsType", optionsType);
            parameters.Add("objectId", objectId);
            this.ValidateMethod("GetOptionsQuery", parameters);
            return base.CreateQuery<SYStblOption>("GetOptions", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SYStblMenu"/> entity instances using the 'GetSYStblMenus' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SYStblMenu"/> entity instances.</returns>
        public EntityQuery<SYStblMenu> GetSYStblMenusQuery()
        {
            this.ValidateMethod("GetSYStblMenusQuery", null);
            return base.CreateQuery<SYStblMenu>("GetSYStblMenus", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SYStblNewsMessage"/> entity instances using the 'GetSYStblNewsMessages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SYStblNewsMessage"/> entity instances.</returns>
        public EntityQuery<SYStblNewsMessage> GetSYStblNewsMessagesQuery()
        {
            this.ValidateMethod("GetSYStblNewsMessagesQuery", null);
            return base.CreateQuery<SYStblNewsMessage>("GetSYStblNewsMessages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SYStblOption"/> entity instances using the 'GetSYStblOptions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SYStblOption"/> entity instances.</returns>
        public EntityQuery<SYStblOption> GetSYStblOptionsQuery()
        {
            this.ValidateMethod("GetSYStblOptionsQuery", null);
            return base.CreateQuery<SYStblOption>("GetSYStblOptions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SYStblMenu"/> entity instances using the 'ListCompanyMenu' query.
        /// </summary>
        /// <param name="companyId">The value for the 'companyId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SYStblMenu"/> entity instances.</returns>
        public EntityQuery<SYStblMenu> ListCompanyMenuQuery(int companyId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyId", companyId);
            this.ValidateMethod("ListCompanyMenuQuery", parameters);
            return base.CreateQuery<SYStblMenu>("ListCompanyMenu", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CLItblCompany"/> entity instances using the 'ListUserCompanies' query.
        /// </summary>
        /// <param name="userId">The value for the 'userId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CLItblCompany"/> entity instances.</returns>
        public EntityQuery<CLItblCompany> ListUserCompaniesQuery(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("ListUserCompaniesQuery", parameters);
            return base.CreateQuery<CLItblCompany>("ListUserCompanies", parameters, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new GlobalOfficeToolsDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'GlobalOfficeToolsDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IGlobalOfficeToolsDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAuthenticatedUser' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetAuthenticatedUserDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetAuthenticatedUser", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetAuthenticatedUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetAuthenticatedUser(string userName, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAuthenticatedUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAuthenticatedUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAuthenticatedUser' operation.</returns>
            QueryResult<CLItblUser> EndGetAuthenticatedUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCLItblAcls' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblAclsDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblAcls", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblAclsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCLItblAcls(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCLItblAcls'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCLItblAcls'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCLItblAcls' operation.</returns>
            QueryResult<CLItblAcl> EndGetCLItblAcls(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCLItblCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblCompaniesDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblCompanies", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCLItblCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCLItblCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCLItblCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCLItblCompanies' operation.</returns>
            QueryResult<CLItblCompany> EndGetCLItblCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCLItblCompanyUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblCompanyUsersDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblCompanyUsers", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblCompanyUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetCLItblCompanyUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCLItblCompanyUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCLItblCompanyUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCLItblCompanyUsers' operation.</returns>
            QueryResult<CLItblCompanyUser> EndGetCLItblCompanyUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCLItblFederationDetails' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblFederationDetailsDomai" +
                "nServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblFederationDetails", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblFederationDetailsRespo" +
                "nse")]
            [WebGet()]
            IAsyncResult BeginGetCLItblFederationDetails(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCLItblFederationDetails'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCLItblFederationDetails'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCLItblFederationDetails' operation.</returns>
            QueryResult<CLItblFederationDetail> EndGetCLItblFederationDetails(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCLItblReferences' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblReferencesDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblReferences", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblReferencesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCLItblReferences(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCLItblReferences'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCLItblReferences'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCLItblReferences' operation.</returns>
            QueryResult<CLItblReference> EndGetCLItblReferences(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCLItblUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblUsersDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblUsers", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetCLItblUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetCLItblUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCLItblUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCLItblUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCLItblUsers' operation.</returns>
            QueryResult<CLItblUser> EndGetCLItblUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetENTtblAddressBooks' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblAddressBooksDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblAddressBooks", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblAddressBooksResponse")]
            [WebGet()]
            IAsyncResult BeginGetENTtblAddressBooks(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetENTtblAddressBooks'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetENTtblAddressBooks'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetENTtblAddressBooks' operation.</returns>
            QueryResult<ENTtblAddressBook> EndGetENTtblAddressBooks(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetENTtblAddresses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblAddressesDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblAddresses", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblAddressesResponse")]
            [WebGet()]
            IAsyncResult BeginGetENTtblAddresses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetENTtblAddresses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetENTtblAddresses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetENTtblAddresses' operation.</returns>
            QueryResult<ENTtblAddress> EndGetENTtblAddresses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetENTtblContacts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblContactsDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblContacts", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblContactsResponse")]
            [WebGet()]
            IAsyncResult BeginGetENTtblContacts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetENTtblContacts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetENTtblContacts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetENTtblContacts' operation.</returns>
            QueryResult<ENTtblContact> EndGetENTtblContacts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetENTtblEntities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblEntitiesDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblEntities", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblEntitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetENTtblEntities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetENTtblEntities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetENTtblEntities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetENTtblEntities' operation.</returns>
            QueryResult<ENTtblEntity> EndGetENTtblEntities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetENTtblPersons' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblPersonsDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblPersons", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetENTtblPersonsResponse")]
            [WebGet()]
            IAsyncResult BeginGetENTtblPersons(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetENTtblPersons'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetENTtblPersons'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetENTtblPersons' operation.</returns>
            QueryResult<ENTtblPerson> EndGetENTtblPersons(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOptions' operation.
            /// </summary>
            /// <param name="optionsType">The value for the 'optionsType' parameter of this action.</param>
            /// <param name="objectId">The value for the 'objectId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetOptionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetOptions", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetOptionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetOptions(string optionsType, int objectId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOptions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOptions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOptions' operation.</returns>
            QueryResult<SYStblOption> EndGetOptions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSYStblMenus' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetSYStblMenusDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetSYStblMenus", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetSYStblMenusResponse")]
            [WebGet()]
            IAsyncResult BeginGetSYStblMenus(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSYStblMenus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSYStblMenus'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSYStblMenus' operation.</returns>
            QueryResult<SYStblMenu> EndGetSYStblMenus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSYStblNewsMessages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetSYStblNewsMessagesDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetSYStblNewsMessages", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetSYStblNewsMessagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSYStblNewsMessages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSYStblNewsMessages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSYStblNewsMessages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSYStblNewsMessages' operation.</returns>
            QueryResult<SYStblNewsMessage> EndGetSYStblNewsMessages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSYStblOptions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetSYStblOptionsDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/GetSYStblOptions", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/GetSYStblOptionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSYStblOptions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSYStblOptions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSYStblOptions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSYStblOptions' operation.</returns>
            QueryResult<SYStblOption> EndGetSYStblOptions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ListCompanyMenu' operation.
            /// </summary>
            /// <param name="companyId">The value for the 'companyId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/ListCompanyMenuDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/ListCompanyMenu", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/ListCompanyMenuResponse")]
            [WebGet()]
            IAsyncResult BeginListCompanyMenu(int companyId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginListCompanyMenu'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginListCompanyMenu'.</param>
            /// <returns>The 'QueryResult' returned from the 'ListCompanyMenu' operation.</returns>
            QueryResult<SYStblMenu> EndListCompanyMenu(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ListUserCompanies' operation.
            /// </summary>
            /// <param name="userId">The value for the 'userId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/ListUserCompaniesDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/ListUserCompanies", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/ListUserCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginListUserCompanies(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginListUserCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginListUserCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'ListUserCompanies' operation.</returns>
            QueryResult<CLItblCompany> EndListUserCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GlobalOfficeToolsDomainService/SubmitChangesDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GlobalOfficeToolsDomainService/SubmitChanges", ReplyAction="http://tempuri.org/GlobalOfficeToolsDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class GlobalOfficeToolsDomainContextEntityContainer : EntityContainer
        {
            
            public GlobalOfficeToolsDomainContextEntityContainer()
            {
                this.CreateEntitySet<CLItblAcl>(EntitySetOperations.All);
                this.CreateEntitySet<CLItblCompany>(EntitySetOperations.All);
                this.CreateEntitySet<CLItblCompanyUser>(EntitySetOperations.All);
                this.CreateEntitySet<CLItblFederationDetail>(EntitySetOperations.All);
                this.CreateEntitySet<CLItblReference>(EntitySetOperations.All);
                this.CreateEntitySet<CLItblUser>(EntitySetOperations.All);
                this.CreateEntitySet<ENTtblAddress>(EntitySetOperations.All);
                this.CreateEntitySet<ENTtblAddressBook>(EntitySetOperations.All);
                this.CreateEntitySet<ENTtblContact>(EntitySetOperations.All);
                this.CreateEntitySet<ENTtblEntity>(EntitySetOperations.All);
                this.CreateEntitySet<ENTtblPerson>(EntitySetOperations.All);
                this.CreateEntitySet<SYStblMenu>(EntitySetOperations.All);
                this.CreateEntitySet<SYStblNewsMessage>(EntitySetOperations.All);
                this.CreateEntitySet<SYStblOption>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'SYStblMenu' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class SYStblMenu : Entity
    {
        
        private string _action;
        
        private string _actionObject;
        
        private string _actionParameters;
        
        private string _image;
        
        private int _menuId;
        
        private int _menuOrder;
        
        private string _name;
        
        private int _parentMenuId;
        
        private string _text;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActionChanging(string value);
        partial void OnActionChanged();
        partial void OnActionObjectChanging(string value);
        partial void OnActionObjectChanged();
        partial void OnActionParametersChanging(string value);
        partial void OnActionParametersChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnMenuIdChanging(int value);
        partial void OnMenuIdChanged();
        partial void OnMenuOrderChanging(int value);
        partial void OnMenuOrderChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentMenuIdChanging(int value);
        partial void OnParentMenuIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SYStblMenu"/> class.
        /// </summary>
        public SYStblMenu()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Action' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Action
        {
            get
            {
                return this._action;
            }
            set
            {
                if ((this._action != value))
                {
                    this.OnActionChanging(value);
                    this.RaiseDataMemberChanging("Action");
                    this.ValidateProperty("Action", value);
                    this._action = value;
                    this.RaiseDataMemberChanged("Action");
                    this.OnActionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ActionObject' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ActionObject
        {
            get
            {
                return this._actionObject;
            }
            set
            {
                if ((this._actionObject != value))
                {
                    this.OnActionObjectChanging(value);
                    this.RaiseDataMemberChanging("ActionObject");
                    this.ValidateProperty("ActionObject", value);
                    this._actionObject = value;
                    this.RaiseDataMemberChanged("ActionObject");
                    this.OnActionObjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ActionParameters' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ActionParameters
        {
            get
            {
                return this._actionParameters;
            }
            set
            {
                if ((this._actionParameters != value))
                {
                    this.OnActionParametersChanging(value);
                    this.RaiseDataMemberChanging("ActionParameters");
                    this.ValidateProperty("ActionParameters", value);
                    this._actionParameters = value;
                    this.RaiseDataMemberChanged("ActionParameters");
                    this.OnActionParametersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Image' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    this.OnImageChanging(value);
                    this.RaiseDataMemberChanging("Image");
                    this.ValidateProperty("Image", value);
                    this._image = value;
                    this.RaiseDataMemberChanged("Image");
                    this.OnImageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MenuId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int MenuId
        {
            get
            {
                return this._menuId;
            }
            set
            {
                if ((this._menuId != value))
                {
                    this.OnMenuIdChanging(value);
                    this.ValidateProperty("MenuId", value);
                    this._menuId = value;
                    this.RaisePropertyChanged("MenuId");
                    this.OnMenuIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MenuOrder' value.
        /// </summary>
        [DataMember()]
        public int MenuOrder
        {
            get
            {
                return this._menuOrder;
            }
            set
            {
                if ((this._menuOrder != value))
                {
                    this.OnMenuOrderChanging(value);
                    this.RaiseDataMemberChanging("MenuOrder");
                    this.ValidateProperty("MenuOrder", value);
                    this._menuOrder = value;
                    this.RaiseDataMemberChanged("MenuOrder");
                    this.OnMenuOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentMenuId' value.
        /// </summary>
        [DataMember()]
        public int ParentMenuId
        {
            get
            {
                return this._parentMenuId;
            }
            set
            {
                if ((this._parentMenuId != value))
                {
                    this.OnParentMenuIdChanging(value);
                    this.RaiseDataMemberChanging("ParentMenuId");
                    this.ValidateProperty("ParentMenuId", value);
                    this._parentMenuId = value;
                    this.RaiseDataMemberChanged("ParentMenuId");
                    this.OnParentMenuIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Text' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._menuId;
        }
    }
    
    /// <summary>
    /// The 'SYStblNewsMessage' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class SYStblNewsMessage : Entity
    {
        
        private string _message;
        
        private DateTime _messageDate;
        
        private int _newMessageId;
        
        private string _title;
        
        private string _writer;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnMessageDateChanging(DateTime value);
        partial void OnMessageDateChanged();
        partial void OnNewMessageIdChanging(int value);
        partial void OnNewMessageIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnWriterChanging(string value);
        partial void OnWriterChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SYStblNewsMessage"/> class.
        /// </summary>
        public SYStblNewsMessage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Message' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(1000)]
        public string Message
        {
            get
            {
                return this._message;
            }
            set
            {
                if ((this._message != value))
                {
                    this.OnMessageChanging(value);
                    this.RaiseDataMemberChanging("Message");
                    this.ValidateProperty("Message", value);
                    this._message = value;
                    this.RaiseDataMemberChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageDate' value.
        /// </summary>
        [DataMember()]
        public DateTime MessageDate
        {
            get
            {
                return this._messageDate;
            }
            set
            {
                if ((this._messageDate != value))
                {
                    this.OnMessageDateChanging(value);
                    this.RaiseDataMemberChanging("MessageDate");
                    this.ValidateProperty("MessageDate", value);
                    this._messageDate = value;
                    this.RaiseDataMemberChanged("MessageDate");
                    this.OnMessageDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewMessageId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int NewMessageId
        {
            get
            {
                return this._newMessageId;
            }
            set
            {
                if ((this._newMessageId != value))
                {
                    this.OnNewMessageIdChanging(value);
                    this.ValidateProperty("NewMessageId", value);
                    this._newMessageId = value;
                    this.RaisePropertyChanged("NewMessageId");
                    this.OnNewMessageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Writer' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Writer
        {
            get
            {
                return this._writer;
            }
            set
            {
                if ((this._writer != value))
                {
                    this.OnWriterChanging(value);
                    this.RaiseDataMemberChanging("Writer");
                    this.ValidateProperty("Writer", value);
                    this._writer = value;
                    this.RaiseDataMemberChanged("Writer");
                    this.OnWriterChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._newMessageId;
        }
    }
    
    /// <summary>
    /// The 'SYStblOption' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/GlobalOfficeTools.VS2012.Web")]
    public sealed partial class SYStblOption : Entity
    {
        
        private int _objectId;
        
        private int _optionId;
        
        private string _optionKey;
        
        private string _optionType;
        
        private string _optionValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnObjectIdChanging(int value);
        partial void OnObjectIdChanged();
        partial void OnOptionIdChanging(int value);
        partial void OnOptionIdChanged();
        partial void OnOptionKeyChanging(string value);
        partial void OnOptionKeyChanged();
        partial void OnOptionTypeChanging(string value);
        partial void OnOptionTypeChanged();
        partial void OnOptionValueChanging(string value);
        partial void OnOptionValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SYStblOption"/> class.
        /// </summary>
        public SYStblOption()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ObjectId' value.
        /// </summary>
        [DataMember()]
        public int ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                if ((this._objectId != value))
                {
                    this.OnObjectIdChanging(value);
                    this.RaiseDataMemberChanging("ObjectId");
                    this.ValidateProperty("ObjectId", value);
                    this._objectId = value;
                    this.RaiseDataMemberChanged("ObjectId");
                    this.OnObjectIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int OptionId
        {
            get
            {
                return this._optionId;
            }
            set
            {
                if ((this._optionId != value))
                {
                    this.OnOptionIdChanging(value);
                    this.ValidateProperty("OptionId", value);
                    this._optionId = value;
                    this.RaisePropertyChanged("OptionId");
                    this.OnOptionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionKey' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string OptionKey
        {
            get
            {
                return this._optionKey;
            }
            set
            {
                if ((this._optionKey != value))
                {
                    this.OnOptionKeyChanging(value);
                    this.RaiseDataMemberChanging("OptionKey");
                    this.ValidateProperty("OptionKey", value);
                    this._optionKey = value;
                    this.RaiseDataMemberChanged("OptionKey");
                    this.OnOptionKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string OptionType
        {
            get
            {
                return this._optionType;
            }
            set
            {
                if ((this._optionType != value))
                {
                    this.OnOptionTypeChanging(value);
                    this.RaiseDataMemberChanging("OptionType");
                    this.ValidateProperty("OptionType", value);
                    this._optionType = value;
                    this.RaiseDataMemberChanged("OptionType");
                    this.OnOptionTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionValue' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string OptionValue
        {
            get
            {
                return this._optionValue;
            }
            set
            {
                if ((this._optionValue != value))
                {
                    this.OnOptionValueChanging(value);
                    this.RaiseDataMemberChanging("OptionValue");
                    this.ValidateProperty("OptionValue", value);
                    this._optionValue = value;
                    this.RaiseDataMemberChanged("OptionValue");
                    this.OnOptionValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._optionId;
        }
    }
}
